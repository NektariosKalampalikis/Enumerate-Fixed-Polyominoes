"""
Python implementation based on [1] to count the number of fixed polyominoes [2].
No need for extra libraries, apart from the optional pprint
whose role is to "pretty print" a graph.

Tested on Python 3.9.4

[1] https://louridas.github.io/rwa/assignments/polyominoes/
[2] Redelmeier, D. Hugh. "Counting polyominoes: yet another attack."
Discrete Mathematics 36.2 (1981): 191-203.

"""

import pprint  # optional library


def neighbors(p, u, v):  # check if node v is a neighbor of u , but v is untried
    """
    Function to check if Node v is a neighbor of u.
    """
    for i in p:
        if i == u:
            continue
        upper = (i[0], i[1]+1)
        down = (i[0], i[1]-1)
        right = (i[0]+1, i[1])
        left = (i[0]-1, i[1])
        if v in (right, upper, down, left):
            return True
    return False


def count_fixed_polyominoes(g, n, untried=None, p=None, r=0):
    """
    Implemented as closely as possible to the pseudocode found at:
    https://louridas.github.io/rwa/assignments/polyominoes/count_fixed_polyominoes_algorithm_nc.png

    Complexity of this algorithm is exponential and is recursive.

    Input:

    g: a G(V,E) graph-square lattice in dictionary form,
    generated by create_polyomino_graph().

    n: number of tiles of the polyomino. Otherwise called
    size of polyomino.

    untried: the not yet examined/tried set of nodes of g.

    p: the current polyomino.


    Output:

    r: the number of fixed polyominoes of size n.

    Notes
    -----
    This implementation is pretty slow for size n > 15. Check out Jensen's [1]
    faster but still exponential algorithm.

    [1] Jensen, Iwan. "Enumerations of lattice animals and trees.",
    Journal of statistical physics 102.3 (2001): 865-881.

    """

    if p is None:  # to avoid default arg list or dict
        p = []
        untried = {(0, 0)}
    untried = list(untried)
    while not len(untried) == 0:
        u = untried[0]
        p.append(u)
        untried.remove(u)
        if len(p) == n:
            r = r+1
        else:
            new_neighbors = []
            for v in g[u]:
                if (v not in untried) and (v not in p) and (not neighbors(p, u, v)):
                    new_neighbors.append(v)
            new_untried = untried+new_neighbors
            r = count_fixed_polyominoes(G, n, new_untried, p, r)
        p.remove(u)
    return r


def create_polyomino_graph(n):
    """
    Function to create a square lattice for this problem.
    For every (x,y) tile  in it:

        {(x,y)|(y>0) or (y=0) and x>=0}

    An example is available at:
    https://louridas.github.io/rwa/assignments/polyominoes/lattice_pentominoes.png

    Input:

    n: the size of polyomino

    Output:

    A dictionary in which every key (node) is paired with values (neighboring nodes)

    """
    polyominograph = {}
    limit = n-2
    # bottom part is half
    for x in range(0, n):
        polyominograph[(x, 0)] = []
    # all other lines are "full"
    for y in range(1, n):
        for x in range(-limit, limit+1):
            polyominograph[(x, y)] = []
        limit -= 1
    for node, neighbor_list in polyominograph.items():
        upper = (node[0], node[1]+1)
        down = (node[0], node[1]-1)
        right = (node[0]+1, node[1])
        left = (node[0]-1, node[1])
        if right in polyominograph:
            neighbor_list.append(right)
        if upper in polyominograph:
            neighbor_list.append(upper)
        if left in polyominograph:
            neighbor_list.append(left)
        if down in polyominograph:
            neighbor_list.append(down)
    return polyominograph


if __name__ == "__main__":
    N = int(input("Size of polyomino: "))
    G = create_polyomino_graph(N)
    printing = input("Do you want to 'pretty print' the graph?(y/n): ")
    if printing in ("y", "yes"):
        pprint.pprint(G)
    polyomino_count = count_fixed_polyominoes(G, N)
    print("Total Polyominoes: ", polyomino_count)
